require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/documents", type: :request do
  before do
    Company.destroy_all
    FactoryBot.create(:contabil_sef)
    FactoryBot.create(:company_user, user: FactoryBot.create(:patron), status: 'aprobat', meta_data: {"categories"=>["facturi_furnizori",  "jurnal_cumparari"]})
    FactoryBot.create(:company_users_angajat, company: Company.first, status: 'aprobat')
    FactoryBot.create(:contabil)
    FactoryBot.create(:document, company: Company.first, author_id: User.angajat.first.id, category: 'facturi_furnizori')
    FactoryBot.create(:document, company: Company.first, author_id: User.contabil.first.id, category: 'jurnal_cumparari', status: 'document_aprobat')
  end

  let(:company) { Company.first }
  let(:contabil_sef) { User.contabil_sef.first }
  let(:contabil) { User.contabil.first }
  let(:patron) { User.patron.first }
  let(:angajat) { User.angajat.first }


  describe "GET /list_categories" do
    it "renders a successful response" do
      get "/api/v1/companies/#{company.id}/documents/list_categories", headers: authenticated_header(patron)
      expect(response).to be_successful
      expect(json['documents'].count).to eq(Document::DOCUMENTS.count)
      expect(json['reports'].count).to eq(Document::REPORTS.count)
    end
  end
  
  describe "GET /list_documents" do
    it "renders a successful response" do
      get "/api/v1/companies/#{company.id}/documents/list_documents", headers: authenticated_header(patron)
      expect(response).to be_successful
      expect(json.size).to eq(2)
    end
  end
  
  describe "GET /list_document" do
    it "renders a successful response" do
      get "/api/v1/companies/#{company.id}/documents/list_document", as: :json,
        params: {document_id: Document.first.id}, 
        headers: authenticated_header(patron)
      expect(response).to be_successful
      expect(json['title']).to eq(Document.first.title)
    end
  end

  describe "POST /upload_document" do
    context "with valid parameters" do
      let(:params) { 
        FactoryBot.build(:document, company: Company.first, category: 'facturi_furnizori').attributes
          .merge(file: Rack::Test::UploadedFile.new("README.md", "text/plain"))
      }

      it "renders a successful response" do
        post "/api/v1/companies/#{company.id}/documents/upload_document", params: params, headers: authenticated_header(patron)
        expect(response).to be_successful
        expect(Document.last.title).to eq(params['title'])
      end
    end
    
    context "with invalid parameters" do
      let(:params) { FactoryBot.build(:document, company: Company.first, category: 'facturi_furnizori').attributes }

      it "raise an error if invalid params" do
        expect{
          post "/api/v1/companies/#{company.id}/documents/upload_document", as: :json, params: params, headers: authenticated_header(patron)
        }.to raise_error(Apipie::ParamInvalid)
      end
    end
  end

  describe "POST /approve_document" do
    it "renders a successful response" do
      post "/api/v1/companies/#{company.id}/documents/approve_document", as: :json,
        params: {document_id: Document.first.id}, 
        headers: authenticated_header(contabil)
      expect(response).to be_successful
      expect(json['title']).to eq(Document.first.title)
    end

    it "return an error if status not document_nou" do
      expect{
        post "/api/v1/companies/#{company.id}/documents/approve_document", as: :json,
          params: {document_id: Document.second.id}, 
          headers: authenticated_header(contabil)
      }.to raise_error(ActiveRecord::RecordNotFound)
    end

    it "returns 403 if not role contabil_sef or contabil" do
      post "/api/v1/companies/#{company.id}/documents/approve_document", as: :json,
        params: {document_id: Document.first.id}, 
        headers: authenticated_header(patron)
      expect(response).to be_forbidden
    end
  end

  describe "DELETE /remove_document" do
    it "renders a successful response" do
      delete "/api/v1/companies/#{company.id}/documents/remove_document", as: :json,
        params: {document_id: Document.first.id}, 
        headers: authenticated_header(contabil)
      expect(response).to be_no_content
    end

    it "removes Document from DB" do
      expect{
        delete "/api/v1/companies/#{company.id}/documents/remove_document", as: :json,
          params: {document_id: Document.first.id}, 
          headers: authenticated_header(contabil)
      }.to change(Document, :count).by(-1)
    end

    it "returns 403 if not role contabil_sef or contabil" do
      delete "/api/v1/companies/#{company.id}/documents/remove_document", as: :json,
        params: {document_id: Document.first.id}, 
        headers: authenticated_header(patron)
      expect(response).to be_forbidden
    end
  end
end
