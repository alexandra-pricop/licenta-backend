require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/patron", type: :request do
  before do
    Company.destroy_all
    FactoryBot.create(:patron)
  end
  
  let(:patron) { User.patron.first }
  let(:other_role) { FactoryBot.create(:angajat) }
  let(:valid_attributes) { FactoryBot.build(:company).attributes }
  let(:invalid_attributes) { FactoryBot.build(:company_without_cui).attributes }


  describe "POST /patron/create_company" do
    context "with valid parameters" do
      it "creates a new Company" do
        expect {
          post "/api/v1/patron/create_company", params: { company: valid_attributes }, headers: authenticated_header(patron)
        }.to change(Company, :count).by(1)
      end
      
      it "creates a new CompanyUser with User patron" do
        post "/api/v1/patron/create_company", params: { company: valid_attributes }, headers: authenticated_header(patron)
        expect(CompanyUser.count).to eq(1)
        expect(CompanyUser.first.user_id).to eq(patron.id)
      end

      it "returns the created company" do
        post "/api/v1/patron/create_company", params: { company: valid_attributes }, headers: authenticated_header(patron)
        company = Company.first
        expect(json['company']['id']).to eq(company.id)
        expect(json['company']['name']).to eq(company.name)
        expect(json['company']['cui']).to eq(company.cui)
        expect(json['company']['status']).to eq('cerere')
      end
    end

    context "with invalid parameters" do
      it "does not create a new Company" do
        expect {
          post "/api/v1/patron/create_company", params: { company: invalid_attributes }, headers: authenticated_header(patron)
        }.to raise_error(Apipie::ParamInvalid)
      end

      it "returns 403 if not role patron" do
        post "/api/v1/patron/create_company", params: { company: invalid_attributes }, headers: authenticated_header(other_role)
        expect(response).to be_forbidden
      end
    end
  end

  describe "GET /patron/list_company_requests" do
    before do
      FactoryBot.create_list(:company_user, 5, user: patron, status: 'aprobat')
      Company.first.update(status: 'aprobat')
      FactoryBot.create_list(:company_user, 3, user: FactoryBot.create(:patron), status: 'aprobat')
    end

    it "renders a successful response" do
      get '/api/v1/patron/list_company_requests', headers: authenticated_header(patron)
      expect(response).to be_successful
      expect(json.size).to eq(4)
    end

    it "returns 403 if not role patron" do
      get "/api/v1/patron/list_company_requests", headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "GET /patron/list_join_requests" do
    before do
      FactoryBot.create(:company_user, user: patron, status: 'aprobat')
      FactoryBot.create_list(:company_users_angajat, 2, company: Company.first)
      FactoryBot.create(:company_users_angajat, company: Company.first, status: 'aprobat')
    end

    it "renders a successful response" do
      get '/api/v1/patron/list_join_requests', params: {company_id: Company.first.id}, headers: authenticated_header(patron)
      expect(response).to be_successful
      expect(json.size).to eq(2)
    end

    it "returns 403 if not role patron" do
      get "/api/v1/patron/list_join_requests", headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "POST /patron/accept_join" do
    before do
      FactoryBot.create(:company_user, user: patron, status: 'aprobat')
      FactoryBot.create(:company_users_angajat, company: Company.first)
    end

    it "renders a successful response" do
      post '/api/v1/patron/accept_join', as: :json,
        params: {company_id: Company.first.id, company_user_id: CompanyUser.cerere.first.id}, 
        headers: authenticated_header(patron)
      expect(response).to be_successful
      expect(json['status']).to eq('aprobat')
    end

    it "returns 403 if not role patron" do
      post '/api/v1/patron/accept_join', as: :json,
        params: {company_id: Company.first.id, company_user_id: CompanyUser.cerere.first.id}, 
        headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "POST /patron/reject_join" do
    before do
      FactoryBot.create(:company_user, user: patron, status: 'aprobat')
      FactoryBot.create(:company_users_angajat, company: Company.first)
    end

    it "renders a successful response" do
      post '/api/v1/patron/reject_join', as: :json,
        params: {company_id: Company.first.id, company_user_id: CompanyUser.cerere.first.id}, 
        headers: authenticated_header(patron)
      expect(response).to be_no_content
    end

    it "removes company_user" do
      expect{
        post '/api/v1/patron/reject_join', as: :json,
          params: {company_id: Company.first.id, company_user_id: CompanyUser.cerere.first.id}, 
          headers: authenticated_header(patron)
      }.to change(CompanyUser, :count).by(-1)
    end

    it "returns 403 if not role patron" do
      post '/api/v1/patron/reject_join', as: :json,
        params: {company_id: Company.first.id, company_user_id: CompanyUser.cerere.first.id}, 
        headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "GET /patron/list_users" do
    before do
      FactoryBot.create(:company_user, user: patron, status: 'aprobat')
      FactoryBot.create_list(:company_users_angajat, 2, company: Company.first, status: 'aprobat')
      FactoryBot.create_list(:company_users_angajat, 3, company: Company.first)
    end

    it "renders a successful response" do
      get '/api/v1/patron/list_users', params: {company_id: Company.first.id}, headers: authenticated_header(patron)
      expect(response).to be_successful
      expect(json.size).to eq(2)
    end

    it "returns 403 if not role patron" do
      get "/api/v1/patron/list_users", headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "POST /patron/remove_user" do
    before do
      FactoryBot.create(:company_user, user: patron, status: 'aprobat')
      FactoryBot.create(:company_users_angajat, company: Company.first, status: 'aprobat')
    end

    it "renders a successful response" do
      post '/api/v1/patron/remove_user', as: :json,
        params: {company_id: Company.first.id, user_id: User.angajat.first.id}, 
        headers: authenticated_header(patron)
      expect(response).to be_no_content
    end

    it "removes company_user" do
      expect{
        post '/api/v1/patron/remove_user', as: :json,
        params: {company_id: Company.first.id, user_id: User.angajat.first.id}, 
          headers: authenticated_header(patron)
      }.to change(CompanyUser, :count).by(-1)
    end

    it "returns 403 if not role patron" do
      post '/api/v1/patron/remove_user', as: :json,
      params: {company_id: Company.first.id, user_id: User.angajat.first.id}, 
        headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "POST /patron/update_roles" do
    before do
      FactoryBot.create(:company_user, user: patron, status: 'aprobat')
      FactoryBot.create(:company_users_angajat, company: Company.first, status: 'aprobat')
    end

    it "renders a successful response" do
      post '/api/v1/patron/update_roles', as: :json,
        params: {company_id: Company.first.id, user_id: User.angajat.first.id, roles: ['facturi_furnizori', 'bonuri_achizitie']}, 
        headers: authenticated_header(patron)
      expect(response).to be_successful
      expect(json['meta_data']['categories']).to eq(["facturi_furnizori", "bonuri_achizitie"])
    end

    it "returns 403 if not role patron" do
      post '/api/v1/patron/update_roles', as: :json,
      params: {company_id: Company.first.id, user_id: User.angajat.first.id, roles: ['facturi_furnizori', 'bonuri_achizitie']},
        headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end
end
