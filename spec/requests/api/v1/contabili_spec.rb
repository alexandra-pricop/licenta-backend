require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/contabili", type: :request do
  before do
    Company.destroy_all
    FactoryBot.create(:admin)
    FactoryBot.create_list(:contabil_sef, 2)
    FactoryBot.create_list(:contabil, 5)
    # creates 2 companies same patron
    FactoryBot.create_list(:company_user, 2, user: FactoryBot.create(:patron), status: 'aprobat')
    # creates 4 angajat for 1st company
    FactoryBot.create_list(:company_users_angajat, 4, company: Company.first, status: 'aprobat')
    # creates 1 company for 2nd patron
    FactoryBot.create(:company_user, user: FactoryBot.create(:patron), status: 'aprobat')
    # creates 2 angajat for 3rd company
    FactoryBot.create_list(:company_users_angajat, 2, company: Company.third)
  end

  let(:admin) { User.admin.first }
  let(:other_role) { FactoryBot.create(:contabil) }
  let(:valid_attributes) { FactoryBot.build(:contabil).attributes.merge(password: '12345678') }
  let(:invalid_attributes) { FactoryBot.build(:patron).attributes.merge(password: '12345678') }

  describe "GET /index" do
    it "renders a successful response" do
      get '/api/v1/contabili', headers: authenticated_header(admin)
      expect(response).to be_successful
      expect(json.size).to eq(7)
    end

    it "returns 403 if not role admin" do
      get "/api/v1/contabili", headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "GET /show" do
    let(:contabil_sef) { User.contabil_sef.first }

    it "renders a successful response" do
      get api_v1_contabili_url(contabil_sef), headers: authenticated_header(admin)
      expect(response).to be_successful
      expect(json['email']).to eq(contabil_sef.email)
    end

    it "returns 403 if not role admin" do
      get api_v1_contabili_url(contabil_sef), headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "POST /contabili" do
    context "with valid parameters" do
      it "renders a successful response" do
        post '/api/v1/contabili', as: :json, params: { user: valid_attributes }, headers: authenticated_header(admin)
        expect(response).to be_successful
        expect(json['email']).to eq(User.last.email)
      end

      it "creates a new contabil" do
        expect {
          post '/api/v1/contabili', as: :json, params: { user: valid_attributes }, headers: authenticated_header(admin)
        }.to change(User, :count).by(1)
      end
    end

    context "with invalid parameters" do
      it "returns a error response" do
        expect{
          post "/api/v1/contabili", params: { user: invalid_attributes }, headers: authenticated_header(admin)
        }.to raise_error(Apipie::ParamInvalid)
      end
    end

    it "returns 403 if not role admin" do
      post '/api/v1/contabili', as: :json, params: { user: valid_attributes }, headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "PUT /contabili" do
    let(:contabil_sef) { User.contabil_sef.second }

    context "with valid parameters" do
      it "renders a successful response" do
        put api_v1_contabili_url(contabil_sef), as: :json, 
          params: { user: contabil_sef.attributes.merge(name: valid_attributes['name']) }, 
          headers: authenticated_header(admin)
        expect(response).to be_successful
        expect(json['name']).to eq(valid_attributes['name'])
      end

      it "changes role" do
        expect {
          put api_v1_contabili_url(contabil_sef), as: :json, 
            params: { user: contabil_sef.attributes.merge(role: valid_attributes['role']) }, 
            headers: authenticated_header(admin)
        }.to change{User.find(contabil_sef.id).role}.to(valid_attributes['role'])
        expect(json['role']).to eq(valid_attributes['role'])
      end
    end

    context "with invalid parameters" do
      it "returns a error response" do
        expect{
          put api_v1_contabili_url(contabil_sef), as: :json, 
            params: { user: contabil_sef.attributes.merge(role: invalid_attributes['role']) }, 
            headers: authenticated_header(admin)
        }.to raise_error(Apipie::ParamInvalid)
      end
    end

    it "returns 403 if not role admin" do
      put api_v1_contabili_url(contabil_sef), as: :json, 
        params: { user: contabil_sef.attributes.merge(name: valid_attributes['name']) }, 
        headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end

  describe "DELETE /contabili" do
    let(:contabil) { User.contabil.first }

    it "renders a successful response" do
      delete api_v1_contabili_url(contabil), headers: authenticated_header(admin)
      expect(response).to be_no_content
    end

    it "removes User from DB" do
      expect{
        delete api_v1_contabili_url(contabil), headers: authenticated_header(admin)
      }.to change{ User.count }.by(-1)
    end

    it "returns 403 if not role admin" do
      delete api_v1_contabili_url(contabil), headers: authenticated_header(other_role)
      expect(response).to be_forbidden
    end
  end
end
